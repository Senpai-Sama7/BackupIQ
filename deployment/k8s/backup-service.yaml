apiVersion: apps/v1
kind: Deployment
metadata:
  name: backup-service
  namespace: backup-enterprise
  labels:
    app.kubernetes.io/name: backup-service
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: backup-orchestrator
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: backup-service
  template:
    metadata:
      labels:
        app.kubernetes.io/name: backup-service
        app.kubernetes.io/version: "1.0.0"
        app.kubernetes.io/component: backup-orchestrator
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: backup-service
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: backup-service
        image: intelligent-backup-enterprise:1.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        envFrom:
        - secretRef:
            name: backup-secrets
        - configMapRef:
            name: backup-config
        resources:
          limits:
            cpu: 2000m
            memory: 4Gi
          requests:
            cpu: 500m
            memory: 1Gi
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: config-volume
          mountPath: /home/appuser/app/config
          readOnly: true
        - name: data-volume
          mountPath: /data/backup-source
          readOnly: true
        - name: logs-volume
          mountPath: /home/appuser/app/logs
      volumes:
      - name: config-volume
        configMap:
          name: backup-config-files
      - name: data-volume
        persistentVolumeClaim:
          claimName: backup-source-pvc
      - name: logs-volume
        emptyDir: {}
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "backup-node"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
---
apiVersion: v1
kind: Service
metadata:
  name: backup-service
  namespace: backup-enterprise
  labels:
    app.kubernetes.io/name: backup-service
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: http
    protocol: TCP
    name: http
  - port: 9090
    targetPort: metrics
    protocol: TCP
    name: metrics
  selector:
    app.kubernetes.io/name: backup-service
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: backup-service
  namespace: backup-enterprise
  labels:
    app.kubernetes.io/name: backup-service
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: backup-enterprise
  name: backup-service-role
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: backup-service-rolebinding
  namespace: backup-enterprise
subjects:
- kind: ServiceAccount
  name: backup-service
  namespace: backup-enterprise
roleRef:
  kind: Role
  name: backup-service-role
  apiGroup: rbac.authorization.k8s.io